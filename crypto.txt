1st line= WELCOMEPOTENTIALWEBCLUBRECRUIT
2nd line=thefinalkeyisnatdszgrqhebvpmxilfywcuko
3rd line =thenextlineiscryptography
4th line =usethekeytwenty
5th line=greatstart





code 
/*********I'm_yash*********/

#include <bits/stdc++.h>
using namespace std;
#define endl ("\n")

#define MOD 1e9+7

#include <stdio.h> 
#include <stdlib.h> 
#include <string.h> 
#define SIZE 30 
  
// Convert all the characters 
// of a string to lowercase 
void toLowerCase(char plain[], int ps) 
{ 
    int i; 
    for (i = 0; i < ps; i++) { 
        if (plain[i] > 64 && plain[i] < 91) 
            plain[i] += 32; 
    } 
} 
  
// Remove all spaces in a string 
// can be extended to remove punctuation 
int removeSpaces(char* plain, int ps) 
{ 
    int i, count = 0; 
    for (i = 0; i < ps; i++) 
        if (plain[i] != ' ') 
            plain[count++] = plain[i]; 
    plain[count] = '\0'; 
    return count; 
} 
  
// generates the 5x5 key square 
void generateKeyTable(char key[], int ks, 
                      char keyT[5][5]) 
{ 
    int i, j, k, flag = 0, *dicty; 
  
    // a 26 character hashmap 
    // to store count of the alphabet 
    dicty = (int*)calloc(26, sizeof(int)); 
  
    for (i = 0; i < ks; i++) { 
        if (key[i] != 'j') 
            dicty[key[i] - 97] = 2; 
    } 
    dicty['j' - 97] = 1; 
  
    i = 0; 
    j = 0; 
    for (k = 0; k < ks; k++) { 
        if (dicty[key[k] - 97] == 2) { 
            dicty[key[k] - 97] -= 1; 
            keyT[i][j] = key[k]; 
            j++; 
            if (j == 5) { 
                i++; 
                j = 0; 
            } 
        } 
    } 
    for (k = 0; k < 26; k++) { 
        if (dicty[k] == 0) { 
            keyT[i][j] = (char)(k + 97); 
            j++; 
            if (j == 5) { 
                i++; 
                j = 0; 
            } 
        } 
    } 
} 
  
// Search for the characters of a digraph 
// in the key square and return their position 
void search(char keyT[5][5], char a, 
            char b, int arr[]) 
{ 
    int i, j; 
  
    if (a == 'j') 
        a = 'i'; 
    else if (b == 'j') 
        b = 'i'; 
  
    for (i = 0; i < 5; i++) { 
        for (j = 0; j < 5; j++) { 
            if (keyT[i][j] == a) { 
                arr[0] = i; 
                arr[1] = j; 
            } 
            else if (keyT[i][j] == b) { 
                arr[2] = i; 
                arr[3] = j; 
            } 
        } 
    } 
} 
  
// Function to find the modulus with 5 
int mod5(int a) 
{ 
    return (a % 5); 
} 
  
// Function to decrypt 
void decrypt(char str[], char keyT[5][5], int ps) 
{ 
    int i, a[4]; 
    for (i = 0; i < ps; i += 2) { 
        search(keyT, str[i], str[i + 1], a); 
        if (a[0] == a[2]) { 
            str[i] = keyT[a[0]][mod5(a[1] - 1)]; 
            str[i + 1] = keyT[a[0]][mod5(a[3] - 1)]; 
        } 
        else if (a[1] == a[3]) { 
            str[i] = keyT[mod5(a[0] - 1)][a[1]]; 
            str[i + 1] = keyT[mod5(a[2] - 1)][a[1]]; 
        } 
        else { 
            str[i] = keyT[a[0]][a[3]]; 
            str[i + 1] = keyT[a[2]][a[1]]; 
        } 
    } 
} 
  
// Function to call decrypt 
void decryptByPlayfairCipher(char str[], char key[]) 
{ 
    char ps, ks, keyT[5][5]; 
  
    // Key 
    ks = strlen(key); 
    ks = removeSpaces(key, ks); 
    toLowerCase(key, ks); 
  
    // ciphertext 
    ps = strlen(str); 
    toLowerCase(str, ps); 
    ps = removeSpaces(str, ps); 
  
    generateKeyTable(key, ks, keyT); 
  
    decrypt(str, keyT, ps); 
} 
 

static char *decoding_table = NULL;

 
void build_decoding_table() {
 
    decoding_table = malloc(256);
 
    for (int i = 0; i < 64; i++)
        decoding_table[(unsigned char) encoding_table[i]] = i;
}

unsigned char *base64_decode(const char *data,size_t input_length,size_t *output_length) {
 
    if (decoding_table == NULL) build_decoding_table();
 
    if (input_length % 4 != 0) return NULL;
 
    *output_length = input_length / 4 * 3;
    if (data[input_length - 1] == '=') (*output_length)--;
    if (data[input_length - 2] == '=') (*output_length)--;
 
    unsigned char *decoded_data = malloc(*output_length);
    if (decoded_data == NULL) return NULL;
 
    for (int i = 0, j = 0; i < input_length;) {
 
        uint32_t sextet_a = data[i] == '=' ? 0 & i++ : decoding_table[data[i++]];
        uint32_t sextet_b = data[i] == '=' ? 0 & i++ : decoding_table[data[i++]];
        uint32_t sextet_c = data[i] == '=' ? 0 & i++ : decoding_table[data[i++]];
        uint32_t sextet_d = data[i] == '=' ? 0 & i++ : decoding_table[data[i++]];
 
        uint32_t triple = (sextet_a << 3 * 6)
        + (sextet_b << 2 * 6)
        + (sextet_c << 1 * 6)
        + (sextet_d << 0 * 6);
 
        if (j < *output_length) decoded_data[j++] = (triple >> 2 * 8) & 0xFF;
        if (j < *output_length) decoded_data[j++] = (triple >> 1 * 8) & 0xFF;
        if (j < *output_length) decoded_data[j++] = (triple >> 0 * 8) & 0xFF;
    }
 
    return decoded_data;
}
string e43(int key, string msg){
     char ch;
      for(int i = 0; msg[i] != '\0'; ++i) {
         ch = msg[i];
         //decrypt for lowercase letter
         if(ch >= 'a' && ch <= 'z') {
            ch = ch - key;
            if(ch < 'a'){
               ch = ch + 'z' - 'a' + 1;
            }
            msg[i] = ch;
         }
         //decrypt for uppercase letter
         else if(ch >= 'A' && ch <= 'Z') {
            ch = ch - key;
            if(ch < 'A') {
               ch = ch + 'Z' - 'A' + 1;
            }
            msg[i] = ch;
         }
      }
      return msg;
   }
   string generateKey(string str, string key) 
{ 
    int x = str.size(); 
  
    for (int i = 0; ; i++) 
    { 
        if (x == i) 
            i = 0; 
        if (key.size() == str.size()) 
            break; 
        key.push_back(key[i]); 
    } 
    return key; 
} 
string generateKey(string str, string key) 
{ 
    int x = str.size(); 
  
    for (int i = 0; ; i++) 
    { 
        if (x == i) 
            i = 0; 
        if (key.size() == str.size()) 
            break; 
        key.push_back(key[i]); 
    } 
    return key; 
}
string e2(string cipher_text, string key) 
{ 
    string orig_text; 
  
    for (int i = 0 ; i < cipher_text.size(); i++) 
    { 
        // converting in range 0-25 
        char x = (cipher_text[i] - key[i] + 26) %26; 
  
        // convert into alphabets(ASCII) 
        x += 'A'; 
        orig_text.push_back(x); 
    } 
    return orig_text; 
} 
int main(){
int i,j;
string s[5];
for(i=0;i<5;i++){
cin>>s[i];
long decode_size = strlen(s[i]);
    char * decoded_data = base64_decode(encoded_data, decode_size, &decode_size);
    s[i]=decoded_data;
    if(i==4)
    cout<<"5th line is="<<s[i]<<endl;
    else{
        s[i]=e43(13,s[i]);
        if(i==3)
        cout<<"4th line is ="<<s[i]<<endl;
        else{
            s[i]=e43(20,s[i]);
            if(i==2)
            cout<<"3rd line is ="<<s[i]<<endl;
            else{
                string keye2=generateKey(s[i],"cryptography")
                s[i]=e2(s[i],keye2);
                if(i==2)
                cout<<"2nd line is ="<<s[i]<<endl;
                else{
                    int ke1="natdszgrqhebvpmxilfywcuko";
                    decryptByPlayfairCipher(s[i], ke1);
                    cout<<"1st line is="<<s[i]<<endl;
                }
            }
        }
    }
}
   


